swagger: "2.0"
info:
  version: "2.0.0"
  title: "booQ"
  description: "booQサーバーのAPIです。"
host: "booq-dev.tokyotech.org"
basePath: /api/
schemes:
 - https
 
tags:
- name: "items"
  description: "物品に関するAPI"
- name: "comments"
  description: "コメントに関するAPI"
- name: "logs"
  description: "履歴に関するAPI"
- name: "likes"
  description: "物品のいいねに関するAPI"
- name: "owners"
  description: "物品の所有者に関するAPI"
- name: "tags"
  description: "タグに関するAPI"
- name: "users"
  description: "ユーザーに関するAPI"

paths:
  /items:
    get:
      tags:
      - "items"
      summary: "物品の一覧を取得します。"
      parameters:
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      - name: "type"
        in: "query"
        description: "リクエストした物品タイプに合う物品一覧を取得します。"
        type: "integer"
      - name: "user"
        in: "query"
        description: "特定のユーザーの所有する物品一覧を取得します。"
        type: "string"
      - name: "tag"
        in: "query"
        description: "リクエストしたタグのついている物品一覧を取得します。"
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/get_items"
    post:
      tags:
      - "items"
      summary: "物品を新しく登録します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            name: "小説　天気の子"
            code: 9784041026403
            type: 1
            description:  "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。 （C）2019「天気の子」製作委員会"
            img_url: "https://cover.openbd.jp/9784041026403.jpg"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "リクエストボディが不正です。"
  /items/:id:
    get:
      tags:
      - "items"
      summary: "物品の詳細情報を取得します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/get_items_id"
    put:
      tags:
      - "items"
      summary: "物品の情報を変更します。(所有者と管理者のみ)"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        description: "全部なくても可。ないものはそのままとなります。"
        required: true
        schema:
          type: "object"
          example:
            name: "小説　天気の子"
            code: 9784041026403
            type: 1
            description:  "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。 （C）2019「天気の子」製作委員会"
            img_url: "https://cover.openbd.jp/9784041026403.jpg"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/item"
        400:
          description: "リクエストボディが不正です。"
        403:
          description: "権限がありません。"
    delete:
      tags:
      - "items"
      summary: "物品を削除します。(管理者のみ)"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
        403:
          description: "権限がありません。"
  /items/:id/comments:
    post:
      tags:
      - "comments"
      summary: "コメントを新規作成します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            text: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/comment1"
        400:
          description: "リクエストボディが不正です。"
  /items/:id/logs:
    post:
      tags:
      - "logs"
      summary: "履歴を新しく登録します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            type: "0"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/log1"
        400:
          description: "リクエストボディが不正です。"
  /items/:id/tags:
    post:
      tags:
      - "tags"
      summary: "item_idと紐づけてタグを登録します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        description: "複数一気に作成するので配列である必要があります。"
        required: true
        schema:
          type: "object"
          example:
            - name: "蟻本"
            - name: "algorithm"
      responses:
        200:
          description: "OK"
  /items/:itemId/tags/:tagId:
    delete:
      tags:
      - "tags"
      summary: "物品に登録されているタグを削除します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          
  /tags:
    get:
      tags:
      - "tags"
      summary: "タグ一覧を取得します。"
      parameters:
      - name: "sort"
        in: "query"
        description: "ソート方法を指定します。考えてるのは登録順(created)と五十音順(name)とよく使われてる順(popular)。"
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            example:
              - id: 1
                name: "蟻本"
              - id: 2
                name: "algorithm"
  
  /comments:
    get:
      tags:
      - "comments"
      summary: "コメント一覧を取得します。"
      parameters:
      - name: "user"
        in: "query"
        description: "特定のユーザーの投稿したコメント一覧を取得します。"
        type: "string"
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいコメントの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/get_comments"
  /comments/:id:
    get:
      tags:
      - "comments"
      summary: "特定のコメントを取得します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/get_comments"
    put:
      tags:
      - "comments"
      summary: "コメントを編集します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            comment: "みんな読んでるので読むべきだと思います。"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/comment2"
    delete:
      tags:
      - "comments"
      summary: "コメントを削除します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          
  /logs:
    get:
      tags:
      - "logs"
      summary: "履歴の一覧を取得します。"
      parameters:
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      - name: "user"
        in: "query"
        description: "特定のユーザーの履歴一覧を取得します。"
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/get_logs"
  /logs/:id:
    delete:
      tags:
      - "logs"
      summary: "履歴を取り消します。"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/log2"
  
  /user/me:
    get:
      tags:
      - "users"
      summary: "自分の情報を取得します。存在しない場合はユーザーを作成します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/user"
  /users:
    get:
      tags:
      - "users"
      summary: "ユーザー一覧を取得します。"
      parameters: 
      - name: "name"
        in: "query"
        description: "取得したいユーザーのIDを指定します。"
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/user"
        404:
          description: "見つかりませんでした。"
    put:
      tags:
      - "users"
      summary: "ユーザーの情報を変更します。主に権限の変更用です。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        description: "権限の変更は権限を持っているユーザーからしかできないようにします。"
        required: true
        schema:
          type: "object"
          example:
            name: "nagatech"
            displayName: "ながてち"
            iconFileId: "e0628393-8045-4c6c-b23c-6f5e6a2c252b"
            admin: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/user"
        403:
          description: "権限がありません"

definitions:
  item:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "小説　天気の子"
      code:
        type: "integer"
        example: 9784041026403
      type:
        type: "integer"
        example: 1
      description:
        type: "string"
        example: "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。 （C）2019「天気の子」製作委員会"
      img_url:
        type: "string"
        example: "https://cover.openbd.jp/9784041026403.jpg"
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  comment1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      text:
        type: "string"
        example: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  comment2:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      text:
        type: "string"
        example: "うわあああよかったなあ"
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  user:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        format: "traq_id"
        example: "nagatech"
      displayName:
        type: "string"
        example: "ながてち"
      iconFileId:
        type: "string"
        format: "uuid"
        example: "e0628393-8045-4c6c-b23c-6f5e6a2c252b"
      admin:
        type: "boolean"
        example: true
  log1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      owner_id:
        type: "integer"
        example: 1
      type:
        type: "integer"
        example: 0
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  log2:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 2
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 2
      type:
        type: "integer"
        example: 1
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  tag1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "小説"
  get_logs:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user:
        $ref: "#/definitions/user"
      owner:
        $ref: "#/definitions/user"
      type:
        type: "integer"
        example: 0
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  get_comments:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user:
        $ref: "#/definitions/user"
      comment:
        type: "string"
        example: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  get_items:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "小説　天気の子"
      code:
        type: "integer"
        example: 9784041026403
      type:
        type: "integer"
        example: 1
      owners:
        type: "array"
        items:
          $ref: "#/definitions/user"
      latest_logs:
        type: "array"
        items:
          $ref: "#/definitions/get_logs"
      like_counts:
        type: "integer"
        example: 1
      img_url:
        type: "string"
        example: "https://cover.openbd.jp/9784041026403.jpg"
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
  get_items_id:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "小説　天気の子"
      code:
        type: "integer"
        example: 9784041026403
      type:
        type: "integer"
        example: 1
      owners:
        type: "array"
        items:
          $ref: "#/definitions/user"
      description:
        type: "string"
        example: "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。 （C）2019「天気の子」製作委員会"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/get_comments"
      logs:
        type: "array"
        items:
          $ref: "#/definitions/get_logs"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/tag1"
      img_url:
        type: "string"
        example: "https://cover.openbd.jp/9784041026403.jpg"
      created_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"
      updated_at:
        type: "string"
        format: "date-time"
        example: "2019/07/28 22:00:00"