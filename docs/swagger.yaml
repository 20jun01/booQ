swagger: "2.0"
info:
  version: "1.0.0"
  title: "booQ"
  description: "booQサーバーのAPIです。"
host: "booq.trap.show"
basePath: /api/
schemes:
 - https
 
tags:
- name: "items"
  description: "物品に関するAPI"
- name: "comments"
  description: "コメントに関するAPI"
- name: "tags"
  description: "タグに関するAPI"
- name: "histories"
  description: "履歴に関するAPI"
- name: "users"
  description: "ユーザーに関するAPI"
- name: "utils"
  description: "その他の補助API"

paths:
  /items:
    get:
      tags:
      - "items"
      summary: "物品の一覧を取得します。"
      parameters:
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      - name: "user"
        in: "query"
        description: "特定のユーザーの所有する物品一覧を取得します。"
        type: "string"
      - name: "tag"
        in: "query"
        description: "リクエストしたタグのついている物品一覧を取得します。"
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/get_items"
    post:
      tags:
      - "items"
      summary: "物品を新しく登録します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            name: "プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～"
            code: 9784839941062
            description:  "[本当の力がつくアルゴリズムの本] プログラミングコンテストの問題を通してアルゴリズムのしくみや考え方を楽しく習得。"
            img_url: "http://images-jp.amazon.com/images/P/4839941068.09.LZZZZZZZ.jpg"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/item1"
  /items/:id:
    get:
      tags:
      - "items"
      summary: "物品の詳細情報を取得します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/get_items_id"
    put:
      tags:
      - "items"
      summary: "物品の情報を変更します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        description: "全部なくても可。ないものはそのままとなります。"
        required: true
        schema:
          type: "object"
          example:
            name:  "プログラミングコンテストチャレンジブック"
            code: 9784839941062
            description: "プログラミングコンテストの問題を通してアルゴリズムのしくみや考え方を楽しく習得。"
            img_url: "http://images-jp.amazon.com/images/P/4839941068.09.LZZZZZZZ.jpg"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/item2"
    delete:
      tags:
      - "items"
      summary: "物品を(見かけ上)削除します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
  /items/:id/comments:
    post:
      tags:
      - "comments"
      summary: "コメントを新規作成します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            comment: "読んだことないけど、みんな読んでるので読むべきだと思います。"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/comment1"
        400:
          description: "リクエストボディが不正です。"
  /items/:id/histories:
    post:
      tags:
      - "histories"
      summary: "履歴を新しく登録します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            type: "0"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/history1"
        400:
          description: "リクエストボディが不正です。"
  /items/:id/tags:
    post:
      tags:
      - "tags"
      summary: "item_idと紐づけてタグを登録します。タグが存在しなければ新規作成します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        description: "複数一気に作成するので配列である必要があります。"
        required: true
        schema:
          type: "object"
          example:
            - name: "蟻本"
            - name: "algorithm"
      responses:
        200:
          description: "OK"
  /items/:itemId/tags/:tagId:
    delete:
      tags:
      - "tags"
      summary: "物品に登録されているタグを削除します。タグに登録してる物品がなくなったらそのタグを物理削除します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          
  /tags:
    get:
      tags:
      - "tags"
      summary: "タグ一覧を取得します。"
      parameters:
      - name: "sort"
        in: "query"
        description: "ソート方法を指定します。考えてるのは登録順(created)と五十音順(name)とよく使われてる順(popular)。"
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            example:
              - id: 1
                name: "蟻本"
              - id: 2
                name: "algorithm"
  
  /comments:
    get:
      tags:
      - "comments"
      summary: "コメント一覧を取得します。"
      parameters:
      - name: "user"
        in: "query"
        description: "特定のユーザーの投稿したコメント一覧を取得します。"
        type: "string"
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいコメントの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/get_comments"
  /comments/:id:
    get:
      tags:
      - "comments"
      summary: "特定のコメントを取得します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/get_comments"
    put:
      tags:
      - "comments"
      summary: "コメントを編集します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            comment: "みんな読んでるので読むべきだと思います。"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/comment2"
    delete:
      tags:
      - "comments"
      summary: "コメントを(見かけ上)削除します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          
  /histories:
    get:
      tags:
      - "histories"
      summary: "履歴の一覧を取得します。"
      parameters:
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      - name: "user"
        in: "query"
        description: "特定のユーザーの履歴一覧を取得します。"
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/get_histories"
  /histories/:id:
    delete:
      tags:
      - "histories"
      summary: "履歴を取り消します。"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/history2"
  
  /users:
    get:
      tags:
      - "users"
      summary: "ユーザー一覧を取得します。"
      parameters: 
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/user1"
  /users/:name:
    get:
      tags:
      - "users"
      summary: "特定のユーザーの情報を取得します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/user1"
    put:
      tags:
      - "users"
      summary: "ユーザーの情報を変更します。主に権限の変更用です。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        description: "このリクエストは権限を持っているユーザーからしか受け付けないようにする必要があります。"
        required: true
        schema:
          type: "object"
          example: 
            authority: 1
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/user1"
        400:
          description: "権限がありません"
  /users/me:
    get:
      tags:
      - "users"
      summary: "自分の情報を取得します。"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/user1"
  
  /utils/image_upload:
    post:
      tags:
      - "utils"
      summary: "imgurのAPIを使って、画像をアップロードし、画像URLを取得します。(未完)"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            example:
              img_url: ""

definitions:
  item1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～"
      code:
        type: "integer"
        example: 9784839941062
      owner_id:
        type: "integer"
        example: 1
      description:
        type: "string"
        example: "[本当の力がつくアルゴリズムの本] プログラミングコンテストの問題を通してアルゴリズムのしくみや考え方を楽しく習得。"
      img_url:
        type: "string"
        example: "http://images-jp.amazon.com/images/P/4839941068.09.LZZZZZZZ.jpg"
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534933275
      updated_at:
        type: "integer"
        format: "timestamp"
        example: 
  item2:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "プログラミングコンテストチャレンジブック"
      code:
        type: "integer"
        example: 9784839941062
      owner_id:
        type: "integer"
        example: 1
      description:
        type: "string"
        example: "プログラミングコンテストの問題を通してアルゴリズムのしくみや考え方を楽しく習得。"
      img_url:
        type: "string"
        example: "http://images-jp.amazon.com/images/P/4839941068.09.LZZZZZZZ.jpg"
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534933275
      updated_at:
        type: "integer"
        format: "timestamp"
        example: 1535380376
  comment1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      comment:
        type: "string"
        example: "読んだことないけど、みんな読んでるので読むべきだと思います。"
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534933932
      updated_at:
        type: "integer"
        format: "timestamp"
        example: 
  comment2:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      comment:
        type: "string"
        example: "みんな読んでるので読むべきだと思います"
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534933932
      updated_at:
        type: "integer"
        format: "timestamp"
        example: 1535304264
  user1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        format: "traq_id"
        example: "nagatech"
      authority:
        type: "integer"
        example: 1
  user2:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 2
      name:
        type: "string"
        format: "traq_id"
        example: "masutech16"
      authority:
        type: "integer"
        example: 0
  history1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      type:
        type: "integer"
        example: 0
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534934374
      deleted_at:
        type: "integer"
        format: "timestamp"
        example: 
  history2:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 2
      item_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 2
      type:
        type: "integer"
        example: 1
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534934374
      deleted_at:
        type: "integer"
        format: "timestamp"
        example: 1535304264
  tag1:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "algorithm"
  tag2:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 2
      name:
        type: "string"
        example: "蟻本"
  get_histories:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user:
        $ref: "#/definitions/user1"
      type:
        type: "integer"
        example: 0
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534934374
      deleted_at:
        type: "integer"
        format: "timestamp"
        example: 
  get_comments:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      item_id:
        type: "integer"
        example: 1
      user:
        $ref: "#/definitions/user1"
      comment:
        type: "string"
        example: "読んだことないけど、みんな読んでるので読むべきだと思います。"
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534933932
  get_items:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～"
      code:
        type: "integer"
        example: 9784839941062
      owner:
        $ref: "#/definitions/user1"
      latest_comment:
        $ref: "#/definitions/get_comments"
      latest_history:
        $ref: "#/definitions/get_histories"
      img_url:
        type: "string"
        example: "http://images-jp.amazon.com/images/P/4839941068.09.LZZZZZZZ.jpg"
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534933275
      updated_at:
        type: "integer"
        format: "timestamp"
        example: 1535014269
  get_items_id:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～"
      code:
        type: "integer"
        example: 9784839941062
      owner:
        $ref: "#/definitions/user1"
      description:
        type: "string"
        example: "[本当の力がつくアルゴリズムの本] プログラミングコンテストの問題を通してアルゴリズムのしくみや考え方を楽しく習得。"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/get_comments"
      histories:
        type: "array"
        items:
          $ref: "#/definitions/get_histories"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/tag1"
      img_url:
        type: "string"
        example: "http://images-jp.amazon.com/images/P/4839941068.09.LZZZZZZZ.jpg"
      created_at:
        type: "integer"
        format: "timestamp"
        example: 1534933275
      updated_at:
        type: "integer"
        format: "timestamp"
        example: 1535014269