version: 2.1

executors:
  default:
    docker:
      - image: circleci/golang:1.12.5
        environment:
          - GO111MODULE: "on"
          - GOCACHE: "/tmp/go/cache"
    working_directory: ~/workspace
  client:
    docker:
      - image: circleci/node:latest
    working_directory: ~/workspace

commands:
  restore_mod:
    steps:
      - restore_cache:
          keys:
            - gomod-{{ checksum "go.mod" }}
  restore_build_cache:
    steps:
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}--
            - build-cache-master--
  install_module:
    steps:
      - run:
          name: client module install
          when: always
          command: cd client && npm ci
  restore_npm_cache:
    steps:
      - restore_cache:
          keys:
            - npm-{{ checksum "client/package-lock.json" }}

jobs:
  server-build:
    executor: default
    steps:
      - checkout
      - restore_mod
      - restore_build_cache
      - run:
          name: go mod
          when: always
          command: go mod download
      - save_cache:
          key: gomod-{{ checksum "go.mod" }}
          when: always
          paths:
            - /go/pkg/mod/cache
      - run:
          name: build
          when: always
          command: |
            mkdir -p $GOCACHE
            go build
      - save_cache:
          key: build-cache-{{ .Branch }}--{{ .Revision }}
          when: always
          paths:
            - /tmp/go/cache
      - store_artifacts:
          path: ~/workspace/booQ
          destination: booQ

  client-build:
    executor: client
    steps:
      - checkout
      - restore_npm_cache
      - install_module
      - save_cache:
          key: npm-{{ checksum "client/package-lock.json" }}
          when: always
          paths:
            - ~/.npm

  server-lint:
    executor: default
    steps:
      - checkout
      - restore_mod
      - run:
          name: Install golangci-lint v1.13.2
          command: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.13.2
      - run: ./bin/golangci-lint run

  client-lint:
    executor: client
    steps:
      - checkout
      - restore_npm_cache
      - install_module
      - run:
          name: lint
          command: cd client && NODE_ENV=production npm run lint


  server-test:
    docker:
      - image: circleci/golang:1.12.5
        environment:
          - GO111MODULE: "on"
          - GOCACHE: "/tmp/go/cache"
          - MYSQL_USERNAME: "root"
          - MYSQL_PASSWORD: "password"
          - MYSQL_DATABASE: "booq_test"
      - image: circleci/mariadb:10.0.38-ram
        environment:
          - MYSQL_ROOT_PASSWORD: "password"
          - MYSQL_DATABASE: "booq_test"
    working_directory: ~/workspace
    steps:
      - checkout
      - restore_mod
      - restore_build_cache
      - run:
          name: Setup DB
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 60s
            go run .circleci/init.go
      - run:
          name: test
          command: go test . ./model ./router -v -covermode=atomic -vet=off

  deploy-staging:
    machine: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - "fa:24:36:42:e9:0a:0b:a2:30:6e:04:e5:b2:a6:f8:51"
      - run:
          name: ssh-keyscan
          command: ssh-keyscan ${STAGING_DEPLOY_HOST} >> ~/.ssh/known_hosts 2>/dev/null
      - run:
          name: deploy staging environment
          command: ssh -o LogLevel=QUIET -t ${STAGING_DEPLOY_USER}@${STAGING_DEPLOY_HOST} "~/booq/deploy.sh"

workflows:
  version: 2
  main:
    jobs:
      - server-build:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - client-build:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - server-lint:
          requires:
            - server-build
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - client-lint:
          requires:
            - client-build
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - server-test:
          requires:
            - server-build
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - deploy-staging:
          requires:
            - server-build
            - client-build
            - server-lint
            - client-lint
            - server-test
          filters:
            branches:
              only: master
